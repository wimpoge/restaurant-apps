<<<<<<< HEAD
{"version":3,"file":"index.js","sources":["../src/parser/base.js","../src/parser/comments.js","../src/parser/error-codes.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../src/tokenizer/types.js","../src/util/location.js","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.js","../src/util/scopeflags.js","../src/util/scope.js","../src/plugins/flow/scope.js","../src/util/whitespace.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/util/class-scope.js","../src/util/expression-scope.js","../src/util/production-parameter.js","../src/parser/util.js","../src/parser/node.js","../src/plugins/flow/index.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/plugins/typescript/scope.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nexport const ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ErrorCode = $Values<typeof ErrorCodes>;\n","// @flow\n\nimport { makeErrorTemplates, ErrorCodes } from \"./error\";\n\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = makeErrorTemplates(\n  {\n    AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n    ArgumentsInClass:\n      \"'arguments' is only allowed in functions and class methods.\",\n    AsyncFunctionInSingleStatementContext:\n      \"Async functions can only be declared at the top level or inside a block.\",\n    AwaitBindingIdentifier:\n      \"Can not use 'await' as identifier inside an async function.\",\n    AwaitBindingIdentifierInStaticBlock:\n      \"Can not use 'await' as identifier inside a static block.\",\n    AwaitExpressionFormalParameter:\n      \"'await' is not allowed in async function parameters.\",\n    AwaitNotInAsyncContext:\n      \"'await' is only allowed within async functions and at the top levels of modules.\",\n    AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n    BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n    BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n    BadSetterRestParameter:\n      \"A 'set' accesor function argument must not be a rest parameter.\",\n    ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n    ConstructorClassPrivateField:\n      \"Classes may not have a private field named '#constructor'.\",\n    ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n    ConstructorIsAsync: \"Constructor can't be an async function.\",\n    ConstructorIsGenerator: \"Constructor can't be a generator.\",\n    DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n    DecoratorBeforeExport:\n      \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n    DecoratorConstructor:\n      \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n    DecoratorExportClass:\n      \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n    DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n    DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n    DeletePrivateField: \"Deleting a private field is not allowed.\",\n    DestructureNamedImport:\n      \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n    DuplicateConstructor: \"Duplicate constructor in the same class.\",\n    DuplicateDefaultExport: \"Only one default export allowed per module.\",\n    DuplicateExport:\n      \"`%0` has already been exported. Exported identifiers must be unique.\",\n    DuplicateProto: \"Redefinition of __proto__ property.\",\n    DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n    ElementAfterRest: \"Rest element must be last element.\",\n    EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n    ExportBindingIsString:\n      \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n    ExportDefaultFromAsIdentifier:\n      \"'from' is not allowed as an identifier after 'export default'.\",\n    ForInOfLoopInitializer:\n      \"'%0' loop variable declaration may not have an initializer.\",\n    ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n    ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n    GeneratorInSingleStatementContext:\n      \"Generators can only be declared at the top level or inside a block.\",\n    IllegalBreakContinue: \"Unsyntactic %0.\",\n    IllegalLanguageModeDirective:\n      \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n    IllegalReturn: \"'return' outside of function.\",\n    ImportBindingIsString:\n      'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n    ImportCallArgumentTrailingComma:\n      \"Trailing comma is disallowed inside import(...) arguments.\",\n    ImportCallArity: \"`import()` requires exactly %0.\",\n    ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n    ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n    IncompatibleRegExpUVFlags:\n      \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n    InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n    InvalidCodePoint: \"Code point out of bounds.\",\n    InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n    InvalidDecimal: \"Invalid decimal.\",\n    InvalidDigit: \"Expected number in radix %0.\",\n    InvalidEscapeSequence: \"Bad character escape sequence.\",\n    InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n    InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n    InvalidIdentifier: \"Invalid identifier %0.\",\n    InvalidLhs: \"Invalid left-hand side in %0.\",\n    InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n    InvalidNumber: \"Invalid number.\",\n    InvalidOrMissingExponent:\n      \"Floating-point numbers require a valid exponent after the 'e'.\",\n    InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n    InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n    InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n    InvalidPropertyBindingPattern: \"Binding member expression.\",\n    InvalidRecordProperty:\n      \"Only properties and spread elements are allowed in record definitions.\",\n    InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n    LabelRedeclaration: \"Label '%0' is already declared.\",\n    LetInLexicalBinding:\n      \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n    LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n    MalformedRegExpFlags: \"Invalid regular expression flag.\",\n    MissingClassName: \"A class name is required.\",\n    MissingEqInAssignment:\n      \"Only '=' operator can be used for specifying default value.\",\n    MissingSemicolon: \"Missing semicolon.\",\n    MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n    MixingCoalesceWithLogical:\n      \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n    ModuleAttributeDifferentFromType:\n      \"The only accepted module attribute is `type`.\",\n    ModuleAttributeInvalidValue:\n      \"Only string literals are allowed as module attribute values.\",\n    ModuleAttributesWithDuplicateKeys:\n      'Duplicate key \"%0\" is not allowed in module attributes.',\n    ModuleExportNameHasLoneSurrogate:\n      \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n    ModuleExportUndefined: \"Export '%0' is not defined.\",\n    MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n    NewlineAfterThrow: \"Illegal newline after throw.\",\n    NoCatchOrFinally: \"Missing catch or finally clause.\",\n    NumberIdentifier: \"Identifier directly after number.\",\n    NumericSeparatorInEscapeSequence:\n      \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n    ObsoleteAwaitStar:\n      \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n    OptionalChainingNoNew:\n      \"Constructors in/after an Optional Chain are not allowed.\",\n    OptionalChainingNoTemplate:\n      \"Tagged Template Literals are not allowed in optionalChain.\",\n    OverrideOnConstructor:\n      \"'override' modifier cannot appear on a constructor declaration.\",\n    ParamDupe: \"Argument name clash.\",\n    PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n    PatternHasMethod: \"Object pattern can't contain methods.\",\n    // This error is only used by the smart-mix proposal\n    PipeBodyIsTighter:\n      \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n    PipeTopicRequiresHackPipes:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n    PipeTopicUnbound:\n      \"Topic reference is unbound; it must be inside a pipe body.\",\n    PipeTopicUnconfiguredToken:\n      'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n    PipeTopicUnused:\n      \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n    PipeUnparenthesizedBody:\n      \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n\n    // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n    // are retained for backwards compatibility\n    // with the deprecated smart-mix pipe operator proposal plugin.\n    // They are subject to removal in a future major version.\n    PipelineBodyNoArrow:\n      'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n    PipelineBodySequenceExpression:\n      \"Pipeline body may not be a comma-separated sequence expression.\",\n    PipelineHeadSequenceExpression:\n      \"Pipeline head should not be a comma-separated sequence expression.\",\n    PipelineTopicUnused:\n      \"Pipeline is in topic style but does not use topic reference.\",\n    PrimaryTopicNotAllowed:\n      \"Topic reference was used in a lexical context without topic binding.\",\n    PrimaryTopicRequiresSmartPipeline:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n\n    PrivateInExpectedIn:\n      \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n    PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n    RecordExpressionBarIncorrectEndSyntaxType:\n      \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionBarIncorrectStartSyntaxType:\n      \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionHashIncorrectStartSyntaxType:\n      \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n    RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n    SloppyFunction:\n      \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n    StaticPrototype: \"Classes may not have static property named prototype.\",\n    StrictDelete: \"Deleting local variable in strict mode.\",\n    StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n    StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n    StrictFunction:\n      \"In strict mode code, functions can only be declared at top level or inside a block.\",\n    StrictNumericEscape:\n      \"The only valid numeric escape in strict mode is '\\\\0'.\",\n    StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n    StrictWith: \"'with' in strict mode.\",\n    SuperNotAllowed:\n      \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n    SuperPrivateField: \"Private fields can't be accessed on super.\",\n    TrailingDecorator: \"Decorators must be attached to a class element.\",\n    TupleExpressionBarIncorrectEndSyntaxType:\n      \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionBarIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionHashIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n    UnexpectedAwaitAfterPipelineBody:\n      'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n    UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n    UnexpectedImportExport:\n      \"'import' and 'export' may only appear at the top level.\",\n    UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n    UnexpectedLeadingDecorator:\n      \"Leading decorators must be attached to a class declaration.\",\n    UnexpectedLexicalDeclaration:\n      \"Lexical declaration cannot appear in a single-statement context.\",\n    UnexpectedNewTarget:\n      \"`new.target` can only be used in functions or class properties.\",\n    UnexpectedNumericSeparator:\n      \"A numeric separator is only allowed between two digits.\",\n    UnexpectedPrivateField: \"Unexpected private name.\",\n    UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n    UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n    UnexpectedToken: \"Unexpected token '%0'.\",\n    UnexpectedTokenUnaryExponentiation:\n      \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n    UnsupportedBind: \"Binding should be performed on object property.\",\n    UnsupportedDecoratorExport:\n      \"A decorated export must export a class declaration.\",\n    UnsupportedDefaultExport:\n      \"Only expressions, functions or classes are allowed as the `default` export.\",\n    UnsupportedImport:\n      \"`import` can only be used in `import()` or `import.meta`.\",\n    UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n    UnsupportedParameterDecorator:\n      \"Decorators cannot be used to decorate parameters.\",\n    UnsupportedPropertyDecorator:\n      \"Decorators cannot be used to decorate object literal properties.\",\n    UnsupportedSuper:\n      \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n    UnterminatedComment: \"Unterminated comment.\",\n    UnterminatedRegExp: \"Unterminated regular expression.\",\n    UnterminatedString: \"Unterminated string constant.\",\n    UnterminatedTemplate: \"Unterminated template.\",\n    VarRedeclaration: \"Identifier '%0' has already been declared.\",\n    YieldBindingIdentifier:\n      \"Can not use 'yield' as identifier inside a generator.\",\n    YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n    ZeroDigitNumericSeparator:\n      \"Numeric separator can not be used after leading 0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport const SourceTypeModuleErrorMessages = makeErrorTemplates(\n  {\n    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  },\n  /* code */ ErrorCodes.SourceTypeModuleError,\n);\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\nimport { type ErrorCode, ErrorCodes } from \"./error-codes\";\nimport { type Node } from \"../types\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n  reasonCode?: String,\n};\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport type ErrorTemplate = {\n  code: ErrorCode,\n  template: string,\n  reasonCode: string,\n};\nexport type ErrorTemplates = {\n  [key: string]: ErrorTemplate,\n};\n\ntype Origin = {| node: Node |} | {| at: Position |};\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"placeholders\"\n  | typeof undefined;\n\nfunction keepReasonCodeCompat(reasonCode: string, syntaxPlugin: SyntaxPlugin) {\n  if (!process.env.BABEL_8_BREAKING) {\n    // For consistency in TypeScript and Flow error codes\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nexport function makeErrorTemplates(\n  messages: {\n    [key: string]: string,\n  },\n  code: ErrorCode,\n  syntaxPlugin?: SyntaxPlugin,\n): ErrorTemplates {\n  const templates: ErrorTemplates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode],\n    });\n  });\n  return Object.freeze(templates);\n}\n\nexport { ErrorCodes };\nexport {\n  ErrorMessages as Errors,\n  SourceTypeModuleErrorMessages as SourceTypeModuleErrors,\n} from \"./error-message\";\n\nexport type raiseFunction = (ErrorTemplate, Origin, ...any) => void;\nexport type ErrorData = {| message: ErrorTemplate, loc: Position |};\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  raise(\n    { code, reasonCode, template }: ErrorTemplate,\n    origin: Origin,\n    ...params: any\n  ): Error | empty {\n    return this.raiseWithData(\n      origin.node ? origin.node.loc.start : origin.at,\n      { code, reasonCode },\n      template,\n      ...params,\n    );\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    loc: Position,\n    { code, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    const pos = loc.index;\n    const message =\n      template.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ code, loc, pos }, message);\n  }\n\n  raiseWithData(\n    loc: Position,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const pos = loc.index;\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object, key) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { node: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { node: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc?: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX openning tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\", { beforeExpr }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","// @flow\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(Errors.VarRedeclaration, { at: loc }, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { ErrorData, ParsingError } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, ErrorData> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport ParserErrors, { Errors, type ErrorTemplate } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (loc?: ?Position, type?: TokenType) => empty;\n  +expectPlugin: (name: string, loc?: Position) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(({ message, loc }) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(message, { at: loc }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      { at: this.state.curPosition() },\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(\n            Errors.InvalidDigit,\n            { at: this.state.curPosition() },\n            radix,\n          );\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        { at: createPositionWithColumnOffset(startLoc, 2) },\n        radix,\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, { at: this.state.curPosition() });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads tempalte continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(message: ErrorTemplate, loc: Position) {\n    if (this.state.strict && !this.state.strictErrors.has(loc.index)) {\n      this.raise(message, { at: loc });\n    } else {\n      this.state.strictErrors.set(loc.index, { loc, message });\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            Errors.StrictNumericEscape,\n            // We immediately follow a \"\\\\\", and we're an 8 or a 9, so we must\n            // be on the same line.\n            createPositionWithColumnOffset(this.state.curPosition(), -1),\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          // We immediately follow a \"\\\\\", and we're something between 0 and 7,\n          // so we must be on the same line.\n          const codePos = createPositionWithColumnOffset(\n            this.state.curPosition(),\n            -1,\n          );\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, { at: codeLoc });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(\n        Errors.InvalidEscapedReservedWord,\n        { at: this.state.startLoc },\n        tokenLabelName(type),\n      );\n    }\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.raise(Errors.InvalidPrivateFieldResolution, { at: loc }, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(Errors.PrivateNameRedeclaration, { at: loc }, name);\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.raise(Errors.InvalidPrivateFieldResolution, { at: loc }, name);\n    }\n  }\n}\n","// @flow\n\nimport type { ErrorData, ErrorTemplate, raiseFunction } from \"../parser/error\";\nimport { Position } from \"./location\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, ErrorData> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(message: ErrorTemplate, loc: Position) {\n    this.errors.set(loc.index, { message, loc });\n  }\n  clearDeclarationError(loc: Position) {\n    this.errors.delete(loc.index);\n  }\n  iterateErrors(iterator: (data: ErrorData) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    loc: Position,\n    template: ErrorTemplate,\n  ): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(template, loc);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(template, { at: loc });\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(\n    template: ErrorTemplate,\n    loc: Position,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(template, { at: loc });\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(template, loc);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(\n    template: ErrorTemplate,\n    loc: Position,\n  ): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(template, loc);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors(({ message, loc }) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(message, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(loc);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors, type ErrorTemplate, ErrorCodes } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport type { PluginConfig } from \"./base\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(\n    node: Node,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(token: TokenType, template?: ErrorTemplate): void {\n    if (!this.eatContextual(token)) {\n      if (template != null) {\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        throw this.raise(template, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: ?Position): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        {\n          code: ErrorCodes.SyntaxError,\n          reasonCode: \"UnexpectedSpace\",\n          template: message,\n        },\n        { at: this.state.lastTokEndLoc },\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      );\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(loc?: ?Position, type?: ?TokenType): empty {\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(\n      {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template:\n          type != null\n            ? `Unexpected token, expected \"${tokenLabelName(type)}\"`\n            : \"Unexpected token\",\n      },\n      { at: loc != null ? loc : this.state.startLoc },\n    );\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  getPluginNamesFromConfigs(pluginConfigs: Array<PluginConfig>): Array<string> {\n    return pluginConfigs.map(c => {\n      if (typeof c === \"string\") {\n        return c;\n      } else {\n        return c[0];\n      }\n    });\n  }\n\n  expectPlugin(pluginConfig: PluginConfig, loc?: ?Position): true {\n    if (!this.hasPlugin(pluginConfig)) {\n      throw this.raiseWithData(\n        loc != null ? loc : this.state.startLoc,\n        { missingPlugin: this.getPluginNamesFromConfigs([pluginConfig]) },\n        `This experimental syntax requires enabling the parser plugin: ${JSON.stringify(\n          pluginConfig,\n        )}.`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(pluginConfigs: Array<PluginConfig>): void {\n    if (!pluginConfigs.some(c => this.hasPlugin(c))) {\n      throw this.raiseWithData(\n        this.state.startLoc,\n        { missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs) },\n        `This experimental syntax requires enabling one of the following parser plugin(s): ${pluginConfigs\n          .map(c => JSON.stringify(c))\n          .join(\", \")}.`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParsingError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParsingError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: ?Position = null;\n  doubleProtoLoc: ?Position = null;\n  privateKeyLoc: ?Position = null;\n  optionalParametersLoc: ?Position = null;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = makeErrorTemplates(\n  {\n    AmbiguousConditionalArrow:\n      \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n    AmbiguousDeclareModuleKind:\n      \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n    AssignReservedType: \"Cannot overwrite reserved type %0.\",\n    DeclareClassElement:\n      \"The `declare` modifier can only appear on class fields.\",\n    DeclareClassFieldInitializer:\n      \"Initializers are not allowed in fields with the `declare` modifier.\",\n    DuplicateDeclareModuleExports:\n      \"Duplicate `declare module.exports` statement.\",\n    EnumBooleanMemberNotInitialized:\n      \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n    EnumDuplicateMemberName:\n      \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n    EnumInconsistentMemberValues:\n      \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n    EnumInvalidExplicitType:\n      \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidExplicitTypeUnknownSupplied:\n      \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidMemberInitializerPrimaryType:\n      \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n    EnumInvalidMemberInitializerSymbolType:\n      \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n    EnumInvalidMemberInitializerUnknownType:\n      \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n    EnumInvalidMemberName:\n      \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n    EnumNumberMemberNotInitialized:\n      \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n    EnumStringMemberInconsistentlyInitailized:\n      \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n    GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n    ImportTypeShorthandOnlyInPureImport:\n      \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n    InexactInsideExact:\n      \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n    InexactInsideNonObject:\n      \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n    InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n    InvalidNonTypeImportInDeclareModule:\n      \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n    MissingTypeParamDefault:\n      \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n    NestedDeclareModule:\n      \"`declare module` cannot be used inside another `declare module`.\",\n    NestedFlowComment:\n      \"Cannot have a flow comment inside another flow comment.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n    SpreadVariance: \"Spread properties cannot have variance.\",\n    ThisParamAnnotationRequired:\n      \"A type annotation is required for the `this` parameter.\",\n    ThisParamBannedInConstructor:\n      \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n    ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n    ThisParamMustBeFirst:\n      \"The `this` parameter must be the first function parameter.\",\n    ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n    TypeBeforeInitializer:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeCastInPattern:\n      \"The type cast expression is expected to be wrapped with parenthesis.\",\n    UnexpectedExplicitInexactInObject:\n      \"Explicit inexact syntax must appear at the end of an inexact object.\",\n    UnexpectedReservedType: \"Unexpected reserved type %0.\",\n    UnexpectedReservedUnderscore:\n      \"`_` is only allowed as a type argument to call or new.\",\n    UnexpectedSpaceBetweenModuloChecks:\n      \"Spaces between `%` and `checks` are not allowed here.\",\n    UnexpectedSpreadType:\n      \"Spread operator cannot appear in class or interface definitions.\",\n    UnexpectedSubtractionOperand:\n      'Unexpected token, expected \"number\" or \"bigint\".',\n    UnexpectedTokenAfterTypeParameter:\n      \"Expected an arrow function after this type parameter declaration.\",\n    UnexpectedTypeParameterBeforeAsyncArrowFunction:\n      \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n    UnsupportedDeclareExportKind:\n      \"`declare export %0` is not supported. Use `%1` instead.\",\n    UnsupportedStatementInDeclareModule:\n      \"Only declares and type imports are allowed inside declare module.\",\n    UnterminatedFlowComment: \"Unterminated flow-comment.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"flow\",\n);\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", loc: Position, value: N.Node |}\n  | {| type: \"string\", loc: Position, value: N.Node |}\n  | {| type: \"boolean\", loc: Position, value: N.Node |}\n  | {| type: \"invalid\", loc: Position |}\n  | {| type: \"none\", loc: Position |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              node: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              node: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              node: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            { at: this.state.startLoc },\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        { at: startLoc },\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: ?Position = null;\n        let inexactStartLoc: ?Position = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStartLoc: ?Position,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { node: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { node: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              node: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { node: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { node: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { node: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            node: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(\n          Errors.InvalidIdentifier,\n          { at: this.state.curPosition() },\n          fullWord,\n        );\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc?: ?Position,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            node: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { node: method });\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { node: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { node: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { node: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.loc.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { node: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { node: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { node: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { node: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          node: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(\n              Errors.ImportBindingIsString,\n              { node: specifier },\n              firstIdent.value,\n            );\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          node: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { node: typeParameters },\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          node: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { node: node.params[i] });\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        { at: loc },\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      loc: Position,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        { at: loc },\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      return this.raise(\n        explicitType === \"boolean\" ||\n          explicitType === \"number\" ||\n          explicitType === \"string\"\n          ? FlowErrors.EnumInvalidMemberInitializerPrimaryType\n          : explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerUnknownType,\n        { at: loc },\n        enumName,\n        memberName,\n        explicitType,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumNumberMemberNotInitialized,\n        { at: loc },\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        { node },\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(\n            FlowErrors.EnumInvalidMemberName,\n            { node: id },\n            memberName,\n            // suggestion\n            memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          );\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(\n            FlowErrors.EnumDuplicateMemberName,\n            { node: id },\n            memberName,\n            enumName,\n          );\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(tt._of)) {\n        if (!tokenIsIdentifier(this.state.type)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(\n              FlowErrors.EnumInconsistentMemberValues,\n              { at: nameLoc },\n              enumName,\n            );\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = makeErrorTemplates(\n  {\n    AttributeIsEmpty:\n      \"JSX attributes must only be assigned a non-empty expression.\",\n    MissingClosingTagElement:\n      \"Expected corresponding JSX closing tag for <%0>.\",\n    MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n    UnexpectedSequenceExpression:\n      \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n    UnsupportedJsxValue:\n      \"JSX value should be either an expression or a quoted JSX text.\",\n    UnterminatedJsxContent: \"Unterminated JSX contents.\",\n    UnwrappedAdjacentJSXElements:\n      \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"jsx\",\n);\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(\n                {\n                  code: ErrorCodes.SyntaxError,\n                  reasonCode: \"UnexpectedToken\",\n                  template: `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n                },\n                { at: this.state.curPosition() },\n              );\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              node: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            node: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            JsxErrors.MissingClosingTagElement,\n            // $FlowIgnore\n            { node: closingElement },\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              JsxErrors.MissingClosingTagElement,\n              // $FlowIgnore\n              { node: closingElement },\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport {\n  Errors,\n  makeErrorTemplates,\n  type ErrorTemplate,\n  ErrorCodes,\n} from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = makeErrorTemplates(\n  {\n    AbstractMethodHasImplementation:\n      \"Method '%0' cannot have an implementation because it is marked abstract.\",\n    AbstractPropertyHasInitializer:\n      \"Property '%0' cannot have an initializer because it is marked abstract.\",\n    AccesorCannotDeclareThisParameter:\n      \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n    AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n    ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n    ClassMethodHasReadonly:\n      \"Class methods cannot have the 'readonly' modifier.\",\n    ConstructorHasTypeParameters:\n      \"Type parameters cannot appear on a constructor declaration.\",\n    DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n    DeclareClassFieldHasInitializer:\n      \"Initializers are not allowed in ambient contexts.\",\n    DeclareFunctionHasImplementation:\n      \"An implementation cannot be declared in ambient contexts.\",\n    DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n    DuplicateModifier: \"Duplicate modifier: '%0'.\",\n    EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n    EmptyTypeArguments: \"Type argument list cannot be empty.\",\n    EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n    ExpectedAmbientAfterExportDeclare:\n      \"'export declare' must be followed by an ambient declaration.\",\n    ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n    IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n    IndexSignatureHasAbstract:\n      \"Index signatures cannot have the 'abstract' modifier.\",\n    IndexSignatureHasAccessibility:\n      \"Index signatures cannot have an accessibility modifier ('%0').\",\n    IndexSignatureHasDeclare:\n      \"Index signatures cannot have the 'declare' modifier.\",\n    IndexSignatureHasOverride:\n      \"'override' modifier cannot appear on an index signature.\",\n    IndexSignatureHasStatic:\n      \"Index signatures cannot have the 'static' modifier.\",\n    InvalidModifierOnTypeMember:\n      \"'%0' modifier cannot appear on a type member.\",\n    InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n    InvalidTupleMemberLabel:\n      \"Tuple members must be labeled with a simple identifier.\",\n    MissingInterfaceName:\n      \"'interface' declarations must be followed by an identifier.\",\n    MixedLabeledAndUnlabeledElements:\n      \"Tuple members must all have names or all not have names.\",\n    NonAbstractClassHasAbstractMethod:\n      \"Abstract methods can only appear within an abstract class.\",\n    NonClassMethodPropertyHasAbstractModifer:\n      \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n    OptionalTypeBeforeRequired:\n      \"A required element cannot follow an optional element.\",\n    OverrideNotInSubClass:\n      \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    PrivateElementHasAbstract:\n      \"Private elements cannot have the 'abstract' modifier.\",\n    PrivateElementHasAccessibility:\n      \"Private elements cannot have an accessibility modifier ('%0').\",\n    ReadonlyForMethodSignature:\n      \"'readonly' modifier can only appear on a property declaration or index signature.\",\n    ReservedArrowTypeParam:\n      \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n    ReservedTypeAssertion:\n      \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n    SetAccesorCannotHaveOptionalParameter:\n      \"A 'set' accessor cannot have an optional parameter.\",\n    SetAccesorCannotHaveRestParameter:\n      \"A 'set' accessor cannot have rest parameter.\",\n    SetAccesorCannotHaveReturnType:\n      \"A 'set' accessor cannot have a return type annotation.\",\n    StaticBlockCannotHaveModifier:\n      \"Static class blocks cannot have any modifier.\",\n    TypeAnnotationAfterAssign:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeImportCannotSpecifyDefaultAndNamed:\n      \"A type-only import can specify a default import or named bindings, but not both.\",\n    TypeModifierIsUsedInTypeExports:\n      \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n    TypeModifierIsUsedInTypeImports:\n      \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n    UnexpectedParameterModifier:\n      \"A parameter property is only allowed in a constructor implementation.\",\n    UnexpectedReadonly:\n      \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n    UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n    UnexpectedTypeCastInParameter:\n      \"Unexpected type cast in parameter position.\",\n    UnsupportedImportTypeArgument:\n      \"Argument in a type import must be a string literal.\",\n    UnsupportedParameterPropertyKind:\n      \"A parameter property may not be declared using a binding pattern.\",\n    UnsupportedSignatureParameterKind:\n      \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"typescript\",\n);\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: ErrorTemplate,\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): void {\n      const enforceOrder = (loc, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(\n            TSErrors.InvalidModifiersOrder,\n            { at: loc },\n            before,\n            after,\n          );\n        }\n      };\n      const incompatible = (loc, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, { at: loc }, mod1, mod2);\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc }, modifier);\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          // $FlowIgnore\n          this.raise(errorTemplate, { at: startLoc }, modifier);\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              TSErrors.UnsupportedSignatureParameterKind,\n              { node: pattern },\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              node: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            node: elementNode,\n          });\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            node: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { node: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          { at: this.state.lastTokStartLoc },\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(\n          TSErrors.EmptyHeritageClauseType,\n          { at: originalStartLoc },\n          descriptor,\n        );\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(\n          node.id,\n          \"typescript interface declaration\",\n          BIND_TS_INTERFACE,\n        );\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          node: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(tt._enum);\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          default: {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n              );\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || tokenIsIdentifier(this.state.type)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers(modified, [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"override\",\n          \"readonly\",\n        ]);\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { node: pp });\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { node });\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            node: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorLoc = this.state.curPosition();\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (tokenIsTemplate(this.state.type)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      // tsTryParseAndCatch is expensive, so avoid if not necessary.\n      // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n      // Also handles `new C<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArgumentsInExpression();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: Position, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          node: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const interfaceNode = this.startNode();\n        this.next();\n        const result = this.tsParseInterfaceDeclaration(interfaceNode);\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt._enum) {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.next(); // eat 'const'\n          this.expectContextual(tt._enum);\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers(\n        member,\n        modifiers,\n        /* disallowedModifiers */ undefined,\n        /* errorTemplate */ undefined,\n        /* stopOnStartOfClassStaticBlock */ true,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { node: member });\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            TSErrors.IndexSignatureHasAccessibility,\n            { node: member },\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { node: member });\n        }\n        if ((member: any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { node: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          node: member,\n        });\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { node: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { node: methodOrProp });\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { node: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (tokenIsIdentifier(this.state.type)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          { at: this.state.startLoc },\n          key.type === \"Identifier\" && !node.computed\n            ? key.name\n            : `[${this.input.slice(key.start, key.end)}]`,\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { node });\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          TSErrors.PrivateElementHasAccessibility,\n          { node },\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          node: typeParameters,\n        });\n      }\n\n      // $FlowIgnore\n      if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { node: method }, method.kind);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { node: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (\n            /*bindingType*/ !args[0] &&\n            contextDescription !== \"parenthesized expression\" &&\n            !expr.extra?.parenthesized\n          ) {\n            this.raise(Errors.InvalidLhs, { node: expr }, contextDescription);\n            break;\n          }\n          this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n          return;\n        case \"TSNonNullExpression\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          node: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n                node: expr,\n              });\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            node,\n          });\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            TSErrors.AbstractMethodHasImplementation,\n            { node: method },\n            key.type === \"Identifier\" && !method.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = this.parseIdentifier();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = this.parseIdentifier();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        leftOfAs = this.parseIdentifier();\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n      }\n    }\n  };\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { makeErrorTemplates, ErrorCodes } from \"../parser/error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = makeErrorTemplates(\n  {\n    ClassNameIsRequired: \"A class name is required.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"placeholders\",\n);\n/* eslint-disable sort-keys */\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  /*:: ObjectMember, */\n  /*:: TsNamedTypeElementBase, */\n  /*:: Identifier, */\n  /*:: PrivateName, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  +parsePrivateName: () => PrivateName\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            Errors.InvalidParenthesizedAssignment,\n            node.loc.start,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { node: prop.key },\n      );\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(Errors.RestTrailingComma, { node: prop });\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc?: ?Position,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raise(Errors.RestTrailingComma, { node: elt });\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            { node: expr },\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(Errors.ParamDupe, { node: expr });\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(Errors.LetInLexicalBinding, { node: expr });\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.loc.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(Errors.InvalidPropertyBindingPattern, {\n            node: expr,\n          });\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          { node: expr },\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(Errors.InvalidRestAssignmentPattern, {\n        node: node.argument,\n      });\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\ndeclare var invariant;\n*/\n\nconst invalidHackPipeBodies = new Map([\n  [\"ArrowFunctionExpression\", \"arrow function\"],\n  [\"AssignmentExpression\", \"assignment\"],\n  [\"ConditionalExpression\", \"conditional\"],\n  [\"YieldExpression\", \"yield\"],\n]);\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { node: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { node: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParsingError,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, { node: left }, value);\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(\n                  Errors.PipeBodyIsTighter,\n                  { at: this.state.startLoc },\n                  this.state.value,\n                );\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (invalidHackPipeBodies.has(body.type) && !body.extra?.parenthesized) {\n      this.raise(\n        Errors.PipeUnparenthesizedBody,\n        { at: startLoc },\n        invalidHackPipeBodies.get(body.type),\n      );\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        node: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startLoc, Errors.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          Errors.ImportCallArity,\n          { node },\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { node: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { node: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(\n          Errors.PrivateInExpectedIn,\n          { at: this.state.startLoc },\n          this.state.value,\n        );\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(\n        Errors.PipeTopicUnconfiguredToken,\n        { at: startLoc },\n        tokenLabelName(tokenType),\n      );\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        Errors.UnsupportedMetaProperty,\n        { node: node.property },\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(SourceTypeModuleErrors.ImportMetaOutsideModule, {\n          node: id,\n        });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        val,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { node: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { node: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { node: prop });\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(\n            Errors.AccessorIsGenerator,\n            { at: this.state.curPosition() },\n            keyName,\n          );\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { node: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { node: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaLoc: ?Position,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaLoc: ?Position,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaLoc, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorOrigin =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? { at: node.key.loc.end }\n                : { node };\n\n            this.raise(Errors.IllegalLanguageModeDirective, errorOrigin);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(\n          Errors.UnexpectedToken,\n          { at: this.state.curPosition() },\n          \",\",\n        );\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(\n        Errors.AwaitBindingIdentifier,\n        startLoc,\n      );\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, { at: startLoc }, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, { at: startLoc }, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.loc.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.loc.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name, loc] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at: loc }, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(SourceTypeModuleErrors.ImportOutsideModule, { node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(\n        Errors.IllegalBreakContinue,\n        { node },\n        isBreak ? \"break\" : \"continue\",\n      );\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { node: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { node: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, { node: expr }, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: ?Position,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        Errors.ForInOfLoopInitializer,\n        { node: init },\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, { node: init }, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              Errors.DeclarationMissingInitializer,\n              { at: this.state.lastTokEndLoc },\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            { at: this.state.lastTokEndLoc },\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { node: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassProperty> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateProperty> = member;\n    const accessorProp: $FlowSubtype<N.ClassAccessorProperty> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          node: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { node: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { node: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { node: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { node: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { node: member });\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { node: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = (prop.key: N.Expression);\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { node: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              node: declaration,\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(\n                Errors.ExportBindingIsString,\n                { node: specifier },\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        { node },\n        name,\n      );\n    }\n    this.exportedIdentifiers.add(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          Errors.ModuleExportNameHasLoneSurrogate,\n          { node: result },\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          { at: this.state.startLoc },\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          Errors.ModuleAttributeDifferentFromType,\n          { node: node.key },\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          { node: node.key },\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(\n          Errors.ImportBindingIsString,\n          { node: specifier },\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","pluginConfig","plugins","has","pluginName","pluginOptions","actualOptions","get","key","Object","keys","getPluginOption","plugin","name","setTrailingComments","node","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","start","CommentsParser","addComment","comment","filename","loc","state","push","processComment","commentStack","commentStackLength","lastCommentWS","end","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","type","properties","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","keepReasonCodeCompat","reasonCode","syntaxPlugin","messages","code","templates","forEach","template","ParserError","raise","origin","raiseWithData","at","raiseOverwrite","pos","index","message","replace","_","line","column","options","errorRecovery","errors","error","assign","_raise","data","errorTemplate","errorContext","err","isLookahead","defineProperty","toUnenumerable","object","enumerable","value","toESTreeLocation","superClass","parse","file","tokens","map","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","parenthesized","parseBlockBody","args","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parsePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","Errors","finishCallExpression","optional","callee","source","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","endLoc","resetEndLocation","lastTokEndLoc","TokContext","constructor","token","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","ExportedTokenType","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","set","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","Position","col","SourceLocation","identifierName","createPositionWithColumnOffset","position","columnOffset","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","clone","skipArrays","val","Array","isArray","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","pushToken","checkKeywordEscapes","nextToken","eat","match","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","ch","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","unexpected","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","content","mods","char","includes","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","readHexChar","quote","out","chunkStart","readEscapedChar","readTemplateContinuation","containsInvalid","inTemplate","codePos","substr","octalStr","octal","codeLoc","n","firstCode","escStart","identifierCheck","esc","keywordTypes","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","assertNoSpace","getPluginNamesFromConfigs","pluginConfigs","c","missingPlugin","JSON","stringify","expectOnePlugin","some","join","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","bind","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","parser","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","count","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStartLoc","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","interfaceNode","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","trailingComma","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","kindKey","parseModuleExportName","PlaceholderErrors","ClassNameIsRequired","parsePlaceholder","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","last","isLast","checkToRestConversion","arg","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","checkClashes","disallowLetBinding","strictModeChanged","elem","invalidHackPipeBodies","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","propertyName","SourceTypeModuleErrors","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorOrigin","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithAsync","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}
=======
{"version":3,"file":"index.js","sources":["../src/util/location.ts","../src/parse-error/credentials.ts","../src/parse-error/module-errors.ts","../src/parse-error/to-node-description.ts","../src/parse-error/standard-errors.ts","../src/parse-error/strict-mode-errors.ts","../src/parse-error/pipeline-operator-errors.ts","../src/parse-error.ts","../src/plugins/estree.ts","../src/tokenizer/context.ts","../src/tokenizer/types.ts","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.ts","../src/util/scopeflags.ts","../src/util/scope.ts","../src/plugins/flow/scope.ts","../src/parser/base.ts","../src/parser/comments.ts","../src/util/whitespace.ts","../src/tokenizer/state.ts","../../babel-helper-string-parser/src/index.ts","../src/tokenizer/index.ts","../src/util/class-scope.ts","../src/util/expression-scope.ts","../src/util/production-parameter.ts","../src/parser/util.ts","../src/parser/node.ts","../src/plugins/flow/index.ts","../src/plugins/jsx/xhtml.ts","../src/plugins/jsx/index.ts","../src/plugins/typescript/scope.ts","../src/plugins/typescript/index.ts","../src/plugins/placeholders.ts","../src/plugins/v8intrinsic.ts","../src/plugin-utils.ts","../src/options.ts","../src/parser/lval.ts","../src/parser/expression.ts","../src/parser/statement.ts","../src/parser/index.ts","../src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","export const enum ParseErrorCode {\n  SyntaxError = \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n}\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get(this: unknown): unknown {\n    return keys.reduce(\n      (object, key) =>\n        // @ts-expect-error key should index object\n        object[key],\n      this,\n    );\n  },\n  set(this: unknown, value: unknown) {\n    keys.reduce(\n      // @ts-expect-error key should index item\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: new () => T,\n  properties: any,\n  descriptors: any,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign(new constructor(), properties),\n    );\n\nexport { instantiate };\n","import { ParseErrorCode } from \"../parse-error\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n};\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n};\n","export default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n};\n","import toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> = T extends Set<infer M>\n  ? M\n  : unknown;\n\ntype UnparanthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparanthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n};\n","import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","import { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { BindingTypes } from \"../util/scopeflags\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node as N.AnyExport;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b0000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b0000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b0000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b0001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b0010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b0100000_0000_00,\n             BIND_FLAGS_TS_IMPORT       = 0b1000000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM    | BIND_FLAGS_TS_CONST_ENUM                                 ,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0                   | BIND_FLAGS_TS_EXPORT_ONLY,\n             BIND_TS_TYPE_IMPORT= 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_TS_IMPORT,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","import {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport type * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & SCOPE_PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlags) {\n    /*:: +createScope: (flags: ScopeFlags) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlags {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number;\n  end: number;\n  comments: Array<Comment>;\n  leadingNode: Node | null;\n  trailingNode: Node | null;\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Undone<Node>} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { Errors } from \"../parse-error\";\nimport { type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: \"loop\" | \"switch\" | undefined | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this) as (keyof State)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // @ts-expect-error val must conform to S[key]\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n\n    // TODO(Babel 8): This is only needed for backwards compatibility,\n    // we can remove it.\n    containsInvalid: !!firstInvalidLoc,\n  };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments\";\nimport type * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    // @ts-expect-error: refine details typing\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | never {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        // @ts-expect-error: refine details typing\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, {\n        at: buildPosition(pos, lineStart, curLine),\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedString, {\n        // Report the error at the string quote\n        at: buildPosition(pos - 1, lineStart, curLine),\n      });\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedTemplate, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n  };\n}\n","import {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport type { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport type Tokenizer from \"../tokenizer\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    {\n      at,\n    }: {\n      at: Position;\n    },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {ParseErrorConstructor<{||}>} error\n   * @param {Node} payload.at\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordArrowParemeterBindingError(\n    error: ParseErrorConstructor<{}>,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return ((isAsync ? PARAM_AWAIT : 0) |\n    (isGenerator ? PARAM_YIELD : 0)) as ParamKind;\n}\n","import { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport type State from \"../tokenizer/state\";\nimport type { EstreePropertyDefinition, Node, ObjectProperty } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\nimport type Parser from \".\";\n\nimport type ScopeHandler from \"../util/scope\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  // TODO\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length] as ParseError<any>,\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T extends NodeType>(loc: Position): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, loc.index, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: Undone<N.FlowDeclare>,\n      isClass: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const decl = super.parseExport(node, decorators);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(FlowErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\" as const;\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\" as const;\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      allowModifiers?: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startLoc.index) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport type { TokContext } from \"../../tokenizer/context\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { type Undone } from \"../../parser/node\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(startLoc: Position): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(startLoc: Position): N.JSXClosingElement {\n      const node = this.startNodeAt(startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(\n                  this.jsxParseSpreadChild(node as Undone<N.JSXSpreadChild>),\n                );\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(\n                    node as Undone<N.JSXExpressionContainer>,\n                    tc.j_expr,\n                  ),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n  BIND_FLAGS_TS_IMPORT,\n  SCOPE_TS_MODULE,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\nimport { Errors } from \"../../parse-error\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: number): void {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_TS_TYPE_IMPORT,\n  BIND_CLASS,\n  BIND_NONE,\n  BIND_FLAGS_TS_IMPORT,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\nimport type { Pattern } from \"../../types\";\nimport type { Expression } from \"../../types\";\nimport type { IJSXParserMixin } from \"../jsx\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: ModifierBase;\n      allowedModifiers: readonly TsModifier[];\n      disallowedModifiers?: TsModifier[];\n      stopOnStartOfClassStaticBlock?: boolean;\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any;\n    }): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: Undone<N.TsTypeParameter>,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        // @ts-expect-error refine typings\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      return super\n        .parseBindingList(tt.parenR, charCodes.rightParenthesis)\n        .map(pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return pattern as any;\n        });\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined | null {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements: boolean | null = null;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        let checkType = type;\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          checkType = elementNode.type;\n        }\n\n        const isLabeled = checkType === \"TSNamedTupleMember\";\n        labeledElements ??= isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type: N.TsType | N.TsNamedTupleMember = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = type.typeName as N.Identifier;\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      // @ts-expect-error refine typings\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return super.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate as N.TsThisType;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate as N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation():\n      | N.TsTypeAnnotation\n      | undefined\n      | null {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined | null {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): N.TsType | undefined | null {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined | null {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | undefined | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined | null {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\" as const;\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return super.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* isHangingDeclaration */ false,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n            /* decorators */ null,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined | null {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod = node as Undone<N.TsModuleDeclaration>;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined | null =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters();\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: boolean | undefined | null,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      let accessibility: N.Accessibility | undefined | null;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified: ModifierBase = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, {\n                at: this.state.startLoc,\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(TSErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n          );\n        }\n      }\n\n      const importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<N.Node>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          super.parseClassStaticBlock(\n            classBody,\n            member as any as N.StaticBlock,\n          );\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingTypes,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n      }\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParemeterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSSatisfiesExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: typeof charCodes[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type { BindingTypes } from \"../util/scopeflags\";\nimport type { Position } from \"../util/location\";\n\ntype PossiblePlaceholedrs = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholedrs;\n\ntype NodeOf<T extends keyof PossiblePlaceholedrs> = PossiblePlaceholedrs[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrFunctionDeclaration(false);\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node, decorators: N.Decorator[] | null): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(node);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport type { ExpressionErrors } from \"../parser/util\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    // @ts-expect-error key may not exist in opts\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils, type Undone } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\nimport type Parser from \"./index\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression.\n   *                                If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *                                If isLHS is `false`, we are in an arrow function parameters list.\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParemeterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: typeof charCodes[keyof typeof charCodes],\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): Array<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    allowModifiers: boolean | undefined | null,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param {NodeType} type A Node `type` string\n   * @param {boolean} isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param {BindingTypes} binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns { boolean | string | [string, boolean] }\n   *          `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingTypes,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param {Expression} expression The expression in question to check.\n   * @param {Object} options A set of options described below.\n   * @param {LValAncestor} options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param {BindingTypes} [options.binding=BIND_NONE]\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param {Set<string>|false} [options.checkClashes=false]\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param {boolean} [options.allowingSloppyLetBinding]\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param {boolean} [options.strictModeChanged=false]\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param {boolean} [options.hasParenthesizedAncestor=false]\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @memberof LValParser\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingTypes;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      allowingSloppyLetBinding?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          // @ts-expect-error: refine types\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(\n    close: typeof charCodes[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport type { ParamKind } from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \".\";\n\nimport type { SourceType } from \"../options\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(\n    node: N.Function,\n    allowModifiers?: boolean,\n  ): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error prop must be an ObjectProperty\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        // @ts-expect-error TS2322: Type 'string' is not assignable to type '\"AssignmentExpression\" | \"ArrowFunctionExpression\" | \"ConditionalExpression\" | \"YieldExpression\"'.\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(decorators, this.startNode()),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: Undone<N.MetaProperty>): N.MetaProperty {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: Adding 1 is probably wrong.\n          at: createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // @ts-expect-error shorthand may not index prop\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        (this.prodParam.currentFlags() | PARAM_RETURN) as ParamKind,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // @ts-expect-error kind may not index node\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                  ? // @ts-expect-error node.key has been gaurded\n                    node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport type { Position } from \"../util/location\";\nimport { createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \"./index\";\n\nconst loopLabel = { kind: \"loop\" } as const,\n  switchLabel = { kind: \"switch\" } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   *\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   *\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  hasFollowingBindingIdentifier(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n\n  startsUsingForOf(): boolean {\n    const lookahead = this.lookahead();\n    if (lookahead.type === tt._of && !lookahead.containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  parseStatementOrFunctionDeclaration(\n    this: Parser,\n    disallowLabeledFunction: boolean,\n  ) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowFunctionDeclaration |\n        (disallowLabeledFunction ? 0 : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowDeclaration) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (!allowFunctionDeclaration) {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.hasFollowingLineBreak() ||\n          this.state.containsEsc ||\n          !this.hasFollowingBindingIdentifier()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, {\n            at: this.state.startLoc,\n          });\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      !!this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      classNode.decorators = maybeDecorators;\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc,\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const startsWithUsing =\n      this.isContextual(tt._using) && !this.hasFollowingLineBreak();\n    const isLetOrUsing =\n      (startsWithLet && this.hasFollowingBindingAtom()) ||\n      (startsWithUsing &&\n        this.hasFollowingBindingIdentifier() &&\n        this.startsUsingForOf());\n    if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n      const initNode = this.startNode<N.VariableDeclaration>();\n      const kind = this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n      const isForIn = this.match(tt._in);\n      if (isForIn && startsWithUsing) {\n        this.raise(Errors.ForInUsing, { at: init });\n      }\n      if (\n        (isForIn || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrFunctionDeclaration(\n      // https://tc39.es/ecma262/#sec-if-statement-static-semantics-early-errors\n      true,\n    );\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrFunctionDeclaration(true)\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrFunctionDeclaration(false)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, {\n          at: this.state.startLoc,\n        });\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowModifiers?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    if (node.module) {\n      if (\n        node.specifiers.length !== 1 ||\n        node.specifiers[0].type !== \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(Errors.ImportReflectionNotBinding, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  parseMaybeImportReflection(node: Undone<N.ImportDeclaration>) {\n    let isImportReflection = false;\n    if (this.isContextual(tt._module)) {\n      const lookahead = this.lookahead();\n      const nextType = lookahead.type;\n      if (tokenIsIdentifier(nextType)) {\n        if (nextType !== tt._from) {\n          // import module x\n          isImportReflection = true;\n        } else {\n          const nextNextTokenFirstChar = this.input.charCodeAt(\n            this.nextTokenStartSince(lookahead.end),\n          );\n          if (nextNextTokenFirstChar === charCodes.lowercaseF) {\n            // import module from from ...\n            isImportReflection = true;\n          }\n        }\n      } else if (nextType !== tt.comma) {\n        // import module { x } ...\n        // import module \"foo\"\n        // They are invalid, we will continue parsing and throw\n        // a recoverable error later\n        isImportReflection = true;\n      }\n    }\n    if (isImportReflection) {\n      this.expectPlugin(\"importReflection\");\n      this.next(); // eat tt._module;\n      node.module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      node.module = false;\n    }\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      this.parseMaybeImportReflection(node);\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        // @ts-expect-error attributes have been deprecated\n        node.attributes = attributes;\n      }\n    }\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldParseDefaultImport(node: Undone<N.ImportDeclaration>): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(specifier: Undone<T>, type: T[\"type\"], bindingType = BIND_LEXICAL) {\n    this.checkLVal(specifier.local, {\n      // @ts-expect-error refine types\n      in: specifier,\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingTypes | undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCode","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","Object","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","ImportMetaOutsideModule","message","code","SourceTypeModuleError","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","toMessage","_excluded","loc","details","SyntaxError","clone","overrides","pos","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","reasonCode","template","rest","_excluded2","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","ESTreeParserMixin","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","at","finishCallExpression","unfinished","optional","callee","source","arguments","hasPlugin","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","declaration","resetStartLocation","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","finishNodeAt","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_SCOPE_OUTSIDE","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_FLAGS_TS_IMPORT","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_TS_TYPE_IMPORT","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","lastTokStart","ct","canStartJSXElement","containsEsc","firstInvalidTemplateEscapePos","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParemeterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","FlowParserMixin","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","TypeScriptParserMixin","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseInOutModifiers","tsParseNoneModifiers","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","checkType","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","parseExprOp","leftStartLoc","minPrec","isSatisfies","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","checkToRestConversion","allowPattern","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","maybeTakeDecorators","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseStatementOrFunctionDeclaration","parseBlock","createNewLexicalScope","parseFunctionId","requireId","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","allowCallParenthesized","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","arg","toReferencedListDeep","parseSpread","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","ObjectProperty","checkLVal","in","checkClashes","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","startIndex","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","parseFunction","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","ParseFunctionFlag","ParseStatementFlag","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasFollowingBindingIdentifier","startsUsingForOf","parseModuleItem","AllowImportExport","AllowDeclaration","AllowFunctionDeclaration","AllowLabeledFunction","parseStatementListItem","disallowLabeledFunction","parseStatement","StatementOnly","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithUsing","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","Declaration","HangingDeclaration","Async","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","Expression","hangingDeclaration","isDeclaration","NullableId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkJSONModuleImport","checkNames","isDefault","isFrom","nodes","surrogate","isJSONModuleImport","nonDefaultNamedSpecifier","parseMaybeImportReflection","isImportReflection","nextNextTokenFirstChar","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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AC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,CAAC,CAAA;AAEj+C,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EA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"}
>>>>>>> master
