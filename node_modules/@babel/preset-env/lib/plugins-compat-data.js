"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
<<<<<<< HEAD
exports.pluginsBugfixes = exports.plugins = void 0;

var _plugins = require("@babel/compat-data/plugins");

var _pluginBugfixes = require("@babel/compat-data/plugin-bugfixes");

var _availablePlugins = require("./available-plugins");

const pluginsFiltered = {};
exports.plugins = pluginsFiltered;
const bugfixPluginsFiltered = {};
exports.pluginsBugfixes = bugfixPluginsFiltered;

for (const plugin of Object.keys(_plugins)) {
  if (Object.hasOwnProperty.call(_availablePlugins.default, plugin)) {
    pluginsFiltered[plugin] = _plugins[plugin];
  }
}

for (const plugin of Object.keys(_pluginBugfixes)) {
  if (Object.hasOwnProperty.call(_availablePlugins.default, plugin)) {
    bugfixPluginsFiltered[plugin] = _pluginBugfixes[plugin];
  }
}
=======
exports.pluginsBugfixes = exports.plugins = exports.overlappingPlugins = void 0;
var _plugins = require("@babel/compat-data/plugins");
var _pluginBugfixes = require("@babel/compat-data/plugin-bugfixes");
var _overlappingPlugins = require("@babel/compat-data/overlapping-plugins");
var _availablePlugins = require("./available-plugins");
const keys = Object.keys;
const plugins = filterAvailable(_plugins);
exports.plugins = plugins;
const pluginsBugfixes = filterAvailable(_pluginBugfixes);
exports.pluginsBugfixes = pluginsBugfixes;
const overlappingPlugins = filterAvailable(_overlappingPlugins);
exports.overlappingPlugins = overlappingPlugins;
function filterAvailable(data) {
  const result = {};
  for (const plugin of keys(data)) {
    if (Object.hasOwnProperty.call(_availablePlugins.default, plugin)) {
      result[plugin] = data[plugin];
    }
  }
  return result;
}

//# sourceMappingURL=plugins-compat-data.js.map
>>>>>>> master
